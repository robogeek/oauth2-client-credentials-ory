/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/date": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the current date in ISO3106 format */
        get: operations["getDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/echo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return posted data */
        post: operations["echoHandler"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * fetch a token
         * @description Return an access token based on clientID and clientSecret.
         */
        post: operations["fetchToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Thingy to echo */
        echoThing: {
            title: string;
            body: string;
        };
        dateResponse: {
            /** Format: date-time */
            date: string;
        };
        /** @description reusable error response. From https://opensource.zalando.com/problem/schema.yaml.
         *      */
        problem: {
            /** @description A short, summary of the problem type. Written in english and readable
             *     for engineers (usually not suited for non technical stakeholders and
             *     not localized); example: Service Unavailable.
             *      */
            title?: string;
            /**
             * Format: int32
             * @description The HTTP status code generated by the origin server for this occurrence
             *     of the problem.
             *
             * @example 503
             */
            status?: number;
            /**
             * @description A human readable explanation specific to this occurrence of the
             *     problem.
             *
             * @example Connection to database timed out
             */
            detail?: string;
        };
        /** @description Body of POST request to /auth/token. Note snake case per https://www.rfc-editor.org/rfc/rfc6749
         *      */
        clientCredentialRequest: {
            /**
             * @description OAuth2 grant type, must be 'client_credentials'
             * @example client_credentials
             * @enum {string}
             */
            grant_type: "client_credentials";
            /**
             * @description client ID to exchange for bearer token.
             * @example ven_client_99
             */
            client_id: string;
            /**
             * @description client secret to exchange for bearer token.
             * @example ven_secret_99
             */
            client_secret: string;
            /**
             * @description application defined scope.
             * @example read_all
             */
            scope?: string;
        };
        /** @description Body response from /auth/token. Note snake case per https://www.rfc-editor.org/rfc/rfc6749
         *      */
        clientCredentialResponse: {
            /**
             * @description access token povided by Authorization service
             * @example MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3
             */
            access_token: string;
            /**
             * @description token type, must be Bearer.
             * @example Bearer
             * @enum {string}
             */
            token_type: "Bearer";
            /**
             * @description expiration period in seconds.
             * @example 3600
             */
            expires_in?: number;
            /**
             * @description refresh token povided by Authorization service
             * @example IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk
             */
            refresh_token?: string;
            /**
             * @description application defined scope.
             * @example read_all
             */
            scope?: string;
        };
        /** @description error reponse on HTTP 400 from auth/token per https://www.rfc-editor.org/rfc/rfc6749 */
        authError: {
            /**
             * @description As described in rfc6749 | invalid_request - The request is missing a parameter so the server can't proceed with the request. This may also be returned if the request includes an unsupported parameter or repeats a parameter. invalid_client - Client authentication failed, such as if the request contains an invalid client ID or secret. Send an HTTP 401 response in this case. invalid_grant - The authorization code (or user’s password for the password grant type) is invalid or expired. This is also the error you would return if the redirect URL given in the authorization grant does not match the URL provided in this access token request. invalid_scope - For access token requests that include a scope (password or client_credentials grants), this error indicates an invalid scope value in the request. unauthorized_client - This client is not authorized to use the requested grant type. For example, if you restrict which applications can use the Implicit grant, you would return this error for the other apps. unsupported_grant_type – If a grant type is requested that the authorization server doesn't recognize, use this code. Note that unknown grant types also use this specific error code rather than using the invalid_request above.
             * @example invalid_request
             * @enum {string}
             */
            error: "invalid_request" | "invalid_client" | "invalid_grant" | "invalid_scope" | "unauthorized_client" | "unsupported_grant_type";
            /**
             * @description Should be a sentence or two at most describing the circumstance of the error
             * @example Request was missing the 'client_id' parameter.
             */
            error_description?: string;
            /**
             * Format: uri
             * @description Optional reference to more detailed error description
             * @example See the full API docs at https://authorization-server.com/docs/access_toke
             */
            error_uri?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getDate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["dateResponse"];
                };
            };
        };
    };
    echoHandler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["echoThing"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["echoThing"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    fetchToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["clientCredentialRequest"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["clientCredentialResponse"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authError"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
}
